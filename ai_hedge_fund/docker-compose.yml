version: '3.8'

services:
  # Main AI Hedge Fund application
  ai-hedge-fund:
    build: .
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data_cache:/app/data_cache
      - ./config:/app/config
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - hedge_fund_network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_hedge_fund
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-hedge_fund_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - hedge_fund_network

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-hedge_fund_redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - hedge_fund_network

  # Celery worker for background tasks
  celery-worker:
    build: .
    command: celery -A ai_hedge_fund.celery worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data_cache:/app/data_cache
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - hedge_fund_network

  # Celery beat for scheduled tasks
  celery-beat:
    build: .
    command: celery -A ai_hedge_fund.celery beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - REDIS_HOST=redis
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data_cache:/app/data_cache
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - hedge_fund_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - hedge_fund_network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-hedge_fund_grafana}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - hedge_fund_network

  # Jupyter notebook server for research
  jupyter:
    build:
      context: .
      dockerfile: docker/jupyter/Dockerfile
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-hedge_fund_jupyter}
    volumes:
      - ./notebooks:/home/jovyan/notebooks
      - ./src:/home/jovyan/src
      - ./data_cache:/home/jovyan/data_cache
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - hedge_fund_network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@aihedgefund.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-hedge_fund_pgadmin}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - hedge_fund_network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-hedge_fund_redis}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - hedge_fund_network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - ai-hedge-fund
    restart: unless-stopped
    networks:
      - hedge_fund_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  pgadmin_data:

networks:
  hedge_fund_network:
    driver: bridge